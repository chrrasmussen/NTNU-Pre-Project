{"id":"JavaFX.txt#content","checksum":"607183cb522aa3e1a4c23efb5c3ba384","text":"JavaFX is supposed to be his successor Java Swing Java as their preferred framework for graphics and user interface from Java 7 JavaFX include more flexible in how to combine graphics and interactive components, has better support for rich graphics and animation, making it easier to separate the function and the purely visual. As a programmer must deal with a completely new API (classes and methods that make up the framework), but the transition is not so great because a good use of known techniques and gradually adopt the new features. Basic structure of a JavaFX application is built up with a stage at the bottom that make up the framework of the application, and typically a name that appears at the top of the application window. A stage filled with a scene. The scene represents the area where we draw the buttons, shapes, text and other components. This is however not completely arbitrary, since all components must be added to a scene graph, and is then called nodes in this graph. Graph structure determines how nodes rendered scene. So: Stage -&gt; Scene -&gt; Scene Graph Scene Graph is scene graph that govern the design of the interface in a JaveFX application. JavaFX Scene Graph API makes it much easier to create a GUI by a scene graph at any time know which objects to be presented, which areas of the screen that must be redrawn and how everything is rendered in the most efficient manner . Using the scene graph API do not need to deal with primitive character methods and can either let the system take care of the details of rendering. A scene graph is a tree structure that contains data elements, and each element is called a node. A node is either a root node, internal node or leaf node, which means that all nodes in the tree, except the root node must have a parent (parent). Below is an example of a simple scene graph, with elements both node types, and with actual classes that may correspond to the node type. Node Type - Photo from oracles website classes that can act as corresponding node type - Photo from oracles website way to build this tree structure is by using lists of children. Each node can act as an internal node has a method getChildren () that returns a list of the closest descendants. In the picture above, the Group&#39;s children-list contain one circle, one rectangle and one region object. Furthermore, region-object list contain one text and one image view object. New children can be added in two ways: parent.getChildren (). Add (node); Adds one node parent.getChildren.addAll (node1, node2, node3, ....); Adds more nodes in JavaFX package. scene, there are lots of classes, but the three most important for understanding the structure to Scene Graph API is Node: Abstract base class for all nodes in a scene graph. Parent: Abstract base class for all internal nodes. (Inherits directly from Node) Scene: Base container for all the contents in a scene graph. These classes contain important functionality that is inherited on and used in connection with the draw order, visibility, transformations, etc. Parent inherited by various inter-node classes Control, Group, Region and WebView. There are also numerous leaf-node classes, such as javafx.scene.shape and javafx.scene.text. Nodes There are some commonalities that apply to all nodes using the JavaFX. All nodes except the root node is added to the graph by addes to the list of children of a parent node. A node can only exist in one place. If you attempt to add an object that child in several different places in the graph, the object is removed from its previous parrents list of children, before it addes that child with his new parent. There can also be no cycles in the graph. Id Each node may also be given an id. This is an id that is very similar to the id tag in HTML, and it is up to the developer to ensure that an id is unique in a scene graph. A useful feature of this compound is lookup (String id) that can be used to find a node with a unique id in a scene graph. Otherwise also id used to identify the nodes when you want to add styles, see more about CSS further down. Coordinates nodes follow a traditional graphical coordinate with increasing values ​​to the right on the x-axis, and increasing values ​​downward on the y-axis. This is thus (0.0) located in the upper left. One can also define the coordinates with floating point and (0.5, 0.5) corresponds to when the center of the pixel in the upper left. Transformations Translate moves in the x and / or y-direction out of the node&#39;s reference point. Thus, a simple movement of the object. TranslateTransition is an extension of Translate and do perform the move as an animation. Rotation rotates the node a number of degrees around a given reference point. RotateTransition allow rotations as an animation. Scale scales node on the basis of the node&#39;s reference point with an x-and y-factor. If the reference point is the top left of the node will be carried down the ring and mother right. The class ScaleTransition are also available. Shearing rotates one axis so that the x-and y-axis is no longer perpendicular to the current node After you have created a transformation intended for one or more nodes can easily perform it by adding it to the list (s) of transformations node (e) node.getTransforms (). add (transform), Cascading Style Sheets (CSS), a node has fields id, style class and style. These are used to change node style with CSS. The fields id and class style used in CSS to determine which nodes should have different styles. Field style used to apply a CSS style to a node directly in your code. For a basic understanding of this concept, take a look at this video. Oracle also has a good tutorial to get a little insight into the opportunities CSS gives us. Layouts JavaFX supports many different layouts and styles through a variety of container classes. These classes are a way predefined &quot;containers&quot; and an analogy may be the way a closet is designed. Your clothes can be added in large and small shelves (like several garments in the same rack), or hung in hangers. If there is a shelf where you want to add from your sweater, no he&#39;s not going to lay the sweater there. It constitutes your clothes nodes, while the shelves and hangers constitute layout. It may well be that the wardrobe basically just split in two, but it&#39;s put more shelves (layouts) in one of the two containers. ...."}