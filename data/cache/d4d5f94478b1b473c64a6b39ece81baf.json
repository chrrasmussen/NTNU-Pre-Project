{"id":"Refactoring.txt#content","checksum":"0683f27a61e22f8c23992766fa75c16a","text":"Refactoring is simply &quot;system code&quot;. This involves changing the internal behavior of a method, class, or an entire project without changing the behavior of the code. There are several reasons to refactor, but a few common examples are (1) one wishes to make the code easier to read, or (2) a desire to improve performance. General refactoring of code A (exaggerated) bad example can be seen below on the left. Here it is primarily the formatting (indentation and parentheses) and poor naming standing up. Even if the person who wrote the code knows that the works will be bad mood if someone else will take over, and understand what is going on! Code block to the right is therefore better, although they do exactly the same. In the code right there are several elements that make it &quot;better&quot;: it is used sensibly names of methods and variables code is nicely formatted with indentation Comments in the code tells what happens Man is consistent with the placement of {and} In the block to the left one takes care of the index of the largest element, and then returns the item in the list at that location. This can be solved better by taking care of the largest number directly and then return this. Refactoring in Eclipse Eclipse has built-in support to assist you with many of the mechanisms above. In addition, there are far more advanced features that you may need a larger program. By right-clicking on various items will bring up a menu where you can select &quot;Refactor&quot;. The options that appear on this menu will depend on what you press. Try a project or a class in the Explorer window and see how it varies. You can also select a method name, field or variable in the editor. This again gives different choices. To rename an item is one of the most useful features. If you change the name of a method using refactoring Eclipse will change all references in the project you are working in. Another good feature that can be used in this course is to move items. You can move a method to another class, or move a class between packages. Select &quot;Refactor&quot; -&gt; &quot;Move&quot; and use the pop-up window to move the item to where you want it. Further reading on the websites of Eclipse you can find more about refactoring."}