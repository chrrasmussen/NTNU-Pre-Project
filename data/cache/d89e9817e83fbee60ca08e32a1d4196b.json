{"id":"Diagrammer.txt#content","checksum":"a3e486a2059c4cb59bd1506c3b4cec05","text":"Charts are used widely to help us think more clearly about both programming, both what is happening or want that to happen when a program is run and how the code is designed. The advantage of the charts is partly because they raise a little over details like shadows fors√•elsen (abstraction) and that the visual form is more intuitive than textual. In addition to helping us think, can also diagrams are used as a kind of visual programming by connecting diagram and code more directly. Charts in this context of box-and-arrow type, where boxes of various types / shapes connected by lines, where both boxes and lines are annotated with text and symbols. An important point is that there is often no clear rules for how the notation (the different types of chart elements) are used and combined, in short everything in a chart means something. Charts in software development is often based on the UML standard (the Unified Modeling Language), where the notation is very well defined. This does not mean that one can not use diagrams as informal sketches, but that one should be aware of some rules for the use of the notation. Chart types Roughly diagrams describing two different aspects of a program: what happens when the program is run, for example. state of the object structures and how program code is structured, for example. which classes exist and how they are interrelated. Object Diagrams is a type of chart that shows the state of a program, by &quot;snapshots&quot; of Object Structures Object Structures. If one thinks of object graphs states and connect them together with transitions, so a kind of object state diagrams Object State Diagram, a show how object structures evolve over time. Class Diagrams Class Diagrams showing the class structure of a program, the content of classes (attributes and operations) and how they are connected with inheritance and associations. Interaction diagrams show how objects in an Object Structures Object Structure using each other, ie, calling each other&#39;s methods. There are two varieties: Interaction Diagrams Interaction Diagrams extends Object Diagrams Object diagrams display of (sequences of) method calls, and Sequence Diagrams Sequence diagrams show method calls between objects along a timeline."}