{"id":"Feil og advarsler i editoren.txt#content","checksum":"e5eade44df414988699a0b69a2a9d947","text":"Errors and warnings in the Eclipse editor When working with Eclipse, you will get red and yellow streaks below the code you write. We distinguish between failure (error) and warnings (warnings) represented respectively by red and yellow markings in Eclipse. You will also find icons with corresponding color in the margin on the left and right. The markers on the left side will be on the same line as the error, while the markers on the right side would represent a kind of summary of errors and warnings in the file. If you hold the mouse pointer over the line or marker, it will pop up a small text box that tells what is wrong. In some cases, the Eclipse also suggest what changes might be sensible to do. By clicking on this proposal will facilitate the Eclipse code by itself! To see a list of errors and warnings in the work Paced your visit to the &quot;Problems&quot; tab. This usually appears as a tab in the editor window, but can also be found by selecting &quot;Window -&gt; Show View -&gt; Problems&quot;. Eclipse has settings that let you determine when errors and warnings are displayed, as well as other settings. See &quot;Windows -&gt; Preferences&quot; and scroll to &quot;Java -&gt; Compiler -&gt; Errors / Warnings&quot;. Error A red bar means you have a bug in the code that allows the compiler will not be able to handle it. In the picture below you see the red line under varibael, and a light bulb with a red cross in the margin on the left side. In this case there are only correcting typing errors for that line will disappear. The red cross is repeated in many places in Eclipse to let you know about the error, including the file name, the package and the project explorer window. Troubleshooting error should be corrected as soon as possible, preferably before you run your program! An application can run with errors, but will stop when it comes to class / method with errors. Examples of errors are semicolon (or other characters) missing calls to methods that do not exist, or potential exceptions that must be caught. Warnings A yellow line is a warning, and may not be critical for the program to work. Look at each warning and consider whether you need to do something about it now, or whether it can wait. Examples of warnings are variables that are not used or unnecessary conditions as in the example below. Warnings urgency is not as much to clear before you run the program, but it&#39;s good code practice to make sure to have as few warnings as possible. Some warnings can also tell that you made an error in the code, which you need to correct. Troubleshooting"}