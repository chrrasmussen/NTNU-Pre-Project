{"id":"Opprette pakker og klasser.txt#content","checksum":"d73675972d26f1704650a6b69622f258","text":"When programming, both in this subject and otherwise, you&#39;re going to create many classes. Eclipse has a nice interface to generate new classes, and put them in the right place in your project. Packages A package is a collection of code that is logically connected. When writing a program, it is natural to separate the parts of the program that handles input / output, graphics, and the logic of the program. In really large programs will divide these kits on, so that each packet contains a few items. You can easily create packages in Eclipse by clicking on the package with a plus sign on the toolbar. Alternatively, you can right-click in the explorer window and select &quot;New&quot; -&gt; &quot;Package&quot;. Classes To create a class, press the green The C located on the toolbar. Alternatively, right click in the explorer window and select &quot;New&quot; -&gt; &quot;Class&quot;. Either method will arrive to the window shown below. This is the window that allows Eclipse is as powerful as it is to create packages and classes! First and foremost, you must ensure that the location of the class is correct, and give it a name - that is what is inside the red box. Tip: If you choose a package that already exists in the tree before you start making class, this package will be filled in for you. In this menu you can select a superclass for the new class, and / or specify the various interfaces (interface). You can also specify other parameters, for example. it is an abstract class, it is a final (final) class, or whether Eclipse will give you a framework for the methods you need to implement (so-called &quot;method stubs&quot;). When you press &quot;Finish&quot; will automatically create a class in the specified package. It will contain all the abstract methods from super classes, as well as the methods of the interfaces that must be implemented. Interface and enum the same way that you create classes, you can also create interfaces and enum types. It will (naturally enough) be fewer choices you can make, but the principles are the same."}