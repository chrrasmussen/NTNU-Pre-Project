{"id":"Sekvensdiagrammer.txt#content","checksum":"4e6b31eb1b92c9a8818d2d41104a5cea","text":"Class Diagrams Class diagrams provide a static picture of the classes in a program, while Objektdiagrammerobjektdiagrammergir a static image of the object structures at runtime. Equally important is to illustrate what happens or should happen at runtime, ie the dynamic behavior of programs. Sequence diagrams are one Charts Chart type that shows how objects interact, ie in which sequence objects perform method calls on hverandre.Dynamisk behavior is about what happens over time and sequence diagrams have an implicit timeline and shows how actors and components in a system &quot;interact&quot; over time by sending &quot;messages&quot;. The concepts of actors, components and messages can be given different interpretations, but essentially it involves two types of use: On a general level: the exchange of information between users, user interfaces (clients) and services (servers). This variation is often used early in the development of the system, to get an overview of how the user wants to use a system and how the different parts of the system supports this use. At a detailed level: method calls performed between objects. This variant is used by precede and assist in coding, or documentation of behavior. For both types of use, the goal is to illustrate the behavior of a hypothetical case, using / execution of a system. For a smaller system, for example. a little game with few objects, then melt these two types of use. Below left is an example of variant 1 for a hypothetical system that responds to existential questions: Stroke The man at the top represents a person / user, while boxes represent system components. The lines are down timelines, while lines across the message flow. Exactly what kind of message it is about and how it is communicated, for example. something the user types, XML sent over the web or simple method call is not important. What is important is the information content and sequence. In addition, it is common to see whether something is considered responses (eng: response) to a question (English: request), using the dotted line. The second variant looks really exactly the same, but when interpreted boxes at the top as objects, messages that method call and any response emphasizes that return values. Since diagram illustrating actual driving, so feel free boxes at the top specific name or id and the text of the message lines are concrete method calls with argument values ​​or return values. If one of the items at the top also acts as arguments and / or return values, so use the name or id."}