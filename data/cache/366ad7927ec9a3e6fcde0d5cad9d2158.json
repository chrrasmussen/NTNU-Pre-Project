{"id":"Koding av valideringsmetoder.txt#content","checksum":"6fa0ab6c866c9f656337ba863abe832c","text":"A validation method is intended to check whether one or more values ​​are valid, so this can be checked by example. setter methods before the corresponding attributes possibly be. There are a number of different ways to encode these on, with different advantages and disadvantages. Take as an example an attribute of a person-name, which should be at least 2 characters and be able to contain letters, spaces and dashes (eng: hyphen). This can be checked by a validation method that returns a logical value, true for valid values ​​and false for invalid: The problem of validation is thus divided into two parts: validation method checks gydlighet and setter calls the validation method and possibly trigger an exception. The disadvantage of this division of labor is that the interpreter must enter a message to the exception object without specific knowledge about why validation method returned false. Thus, the error message be general rather than speci got the error. An alternative is to trigger the exception in validation method, instead of returning true or false: Since validation method no longer returns boolean, we change the name to start with &quot;is&quot;, so now called the check name. And since it triggers the exception, the planter can be simplified: If&#39;en is unnecessary, if the check name triggers the exception will not be executed assignment and we need no if-statement. The disadvantage of this variant is that it complicates other classes, since they can not check the value of the validity of a name without using try / catch. Below we present two models that solves this problem. The left variant allows validation method return a message body or zero if everything is ok. The right variant allows validation method take an extra argument indicating whether true / false will be returned instead trigger an exception. Code that calls the validation method must remember the message, since it will be used if it is not null. The planter becomes simple, and the code outside the class who do not want the exception to be triggered, calls the validation method with false as the second argument. Questions to ponder what it is that determines which of the varieties one should choose? What considerations are important, to make the code easy to class a printer or to make it easy for other classes to use it?"}