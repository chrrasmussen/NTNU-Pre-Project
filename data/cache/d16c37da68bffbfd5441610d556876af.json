{"id":"Synlighetsmodifikatorer.txt#content","checksum":"d4f684501bccff72cd232ae1ececa2e8","text":"In java there are several synlighetsmodifikatorer which allows to control &quot;access&quot; to classes, variables, methods and constructors. For more on why we want to control this &quot;access&quot;, see Housing. We have four levels of availability: Visible Package (package) is the default value and needs no modifier Visible only in class, private Shown to all public Shown in the package and subclasses, protected Public If you declare a field, method, etc. public, it is possible for anyone who knows about the resource to retrieve / change / call it. Private If you declare a field, method, etc. as private, it is only possible to retrieve / change / call on this resource directly in class. Note that the values ​​of private fields can still be obtained through a getter or change a setting. Defaut If you declare a field, method, etc. without synlighetsmodifikator, assigned the default value. This makes the resource available to all classes that are in the same package. Protected If you declare a field, method, etc. as protected, it is possible to extract / transform / call the resource if the call comes from the same package or from a subclass of class where the resource is defined. The example below requires knowledge of Arvarv. If Painter has a default field, method, etc. here will not Roompainter could reach this resource, because the classes are not in the same package. Visibility through inheritance There are java a set of rules for visibility through inheritance methods that are declared as public in the superclass must also be public in subclasses Methods that are declared as protected in a superclass must either be protected or public in subclasses, it is not possible reducing visibility to private. Methods declared without synlighetsmodifikator (default) may be declared more hidden in subclasses Methods that are declared private are not inherited at all, so there are no rules for these."}