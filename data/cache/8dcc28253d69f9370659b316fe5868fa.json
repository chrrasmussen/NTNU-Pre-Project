{"id":"Collection-rammeverket.txt#content","checksum":"bce1cc5812e20c40a0b10a5a78591d20","text":"A collection is an object that represents a group of objects. This is widely used in the programming context, and to facilitate the representation and manipulation of such objects have Java platform a separate framework with useful structures and optimized algorithms. Besides setting a standard, saves the collection framework provides for a large amount of implementation that would take a lot of time to program every time you needed it. The base of the framework are fourteen interfaces that represent different types of collections such as sets, lists and maps. On Oracle&#39;s pages you will find this table, which summarizes implementations of the various interfaces pretty straightforward: Note! Here are the interfaces contained in four groups. There are eg. multiple interfaces of the &quot;type&quot; Set. Understanding the interfaces Set A set is a collection that can not contain duplicate elements. The interface represents the mathematical definition of a quantity, and used for example to keep the cards that make up a poker hand or processes running on a computer. One can perform a number of batch operations on a set. These and more about set-interface can be found here. List A list is an ordered (not the same as ordered) collection that can contain duplicate elements. When using lists have often control over where in the list each element is inserted and can access elements by their index positions. More about list-interface here. Queue A queue is a collection that is used to hold additional items in order of priority with respect to processing. For out basic collection operations support a queue additional insertion, shafts and inspection operations. Queues arrange usually, but not necessarily, the elements in a FIFO (first-in, first-out) system. Other examples include queues where the elements are arranged according to a given comparable value, or the elements&#39; natural arrangement. No matter how organized the queue, the element of the queue is removed if you call remove or tokens. More about the queue here. A Deque deque works the same way as a queue, but we can also add, remove and examine elements at both ends of the line (double-ended queue). This makes a deque can both be used with a FIFO and a LIFO (Last-in, First-out) system. More here. Map A map is an object folders keys to values. A map can not contain duplicate keys, and each key can only folder for a value. If you&#39;ve used a hash table if one knows the concepts behind a map. Maps is not an ordered collection, but using key lookup can be done in constant time. More about maps here."}