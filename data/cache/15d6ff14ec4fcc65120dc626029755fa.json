{"id":"StringBuffer og StringBuilder.txt#content","checksum":"2a456e8c2cf11ad43e4c92bbc030d6c2","text":"StringBuffer and StringBuilder are classes used if one needs to make a greater number of manipulations of strings of characters. Classes will have significantly better performance than the continuous manipulation of a String. As can be read Stringher, one can not change a String, but use all or part of the content to create a new String. By using StringBuffer or StringBuilder to modify or build a string of many operations can thus avoid leaving a large amount of unused new String objects. Buffer vs Builder difference between the two classes is essentially that StringBuffer is synchronized and StringBuilder is not. This means that StringBuffer is safe to use across threads with java threads (Threads) but since this is rarely a problem was StringBuilder class, introduced, only without synchronization. This leads to a StringBuilder in almost all cases is faster than StringBuffer, and is preferred if one can ignore thread safety. Important methods In addition to the StringBuilder roughly be regarded as &quot;one-wire version&quot; of String Buffer classes have almost identical API and the following methods are applicable to both. append (String s) - Adds s at the end of a StringB. reverse () - Reverses StringB&#39;en method is called for. delete (int start, int end) - Deleting items in StringB&#39;en from the start, (but not) end insert (int offset, String s) - Inserts s at position offset replace (int start, int end, String s) - Replaces one substring from start to end with p More about StringBuilder and StringBuffer, as well as a full list of methods available here."}