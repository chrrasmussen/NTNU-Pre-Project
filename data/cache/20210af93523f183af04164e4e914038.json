{"id":"Faginnhold.txt#content","checksum":"b9cb680f075a5b18f489a40685c64688","text":"This page gives an overview of the course curriculum TDT4100 - object oriented programming with Java. Some of the topics are assumed to know before taking TDT4100 and are for complete convenience. The topics are divided into four Object Oriented Programming - concepts and constructs that are important for object oriented development methodology and supported by UML and most object-oriented languages. This constitutes the theoretical part of TDT4100. Java programming - using Java for implementation of object-oriented programs, so that one can realize what you have designed. Along with using Eclipse make up this practical part of TDT4100. Eclipse - the use of Eclipse as an example of modern tools for application development. Procedure oriented programming - programming concepts and structures that constitute the core of most programming languages, including those that are not object-oriented. This should be known before one takes TDT4100. Object-oriented programming Java programming EclipseBruk Eclipse Procedure Oriented Programming Content (assumptions / curriculum) data types logical (boolean, true / false) number integer (int / byte / short / long) decimal number (double / float) characters (char) String Need (String) Implicit conversion to String with String.valueOf Object.toString tables and variables declaration local (in methods and blocks) global (in classes) constants (final) initialization assignment blocks / skoping life expressed in constant values ​​tabellkonstanter initialization vs. generally expressed variable references operators and operands numeric (+, -, *, /,%) bit (&amp;, |, &lt;&lt;, &gt;&gt;, ~) numerical comparison (&gt;,&gt; =, &lt;, &lt;=) comparison (== ,! =) logic (!, &amp;&amp;, | |, ^) strengspleising (+) assigning any m / operator ( <op> =) Pre / post-dekrement / increment (+ +, -) conditional (? :) Precedence and parentheses method calls and parameter passing conversion of values ​​implicit conversion explicitly truncation of numerics this reference Control Structures conditions and selection (if / else, switch / case / default) iteration (while, for) start condition stop conditions increased sentence out / jump out or over (break / continue) named loops (Brands) methods parameters return type overloading (overloading) body application method main signature command line parameters classes categories of data classes interface enum member field methods constructor Interface / encapsulation visibility (smodifikatorer): public, private, package / default, protected conventions: get / set methods, count / get / set, add (append / insert) / remove, contains / indexOf heritage implements / extends polymorphism abstract classes parameterized / generic covariance / konvarians used in Collection Framework custom entities / instantiation exception handling throw try / catch finally throws checked vs. unchecked Exception: IOException, FileNotFoundException, RuntimeException, NullPointerException, IndexOutOfBoundsException, IllegalArgumentException, NumberFormatException, IllegalStateException, UnsupportedOperationException iteration: standard loops, tables, Collection agencies (and tables), strings, text input, data input, the accumulation of profit standard-klasser/objekter use of full class name with package vs. import System.out: print / println, printf System.in and Scanner Data Structures Collection framework: Collection / List / ArrayList / Linked List, Iterator, Set, Map / HashMap custom: linked lists, stack / stack, queue / queues, trees, Table numbers / calculations number classes Math: PI, random (), various functions (min / max / abs, rounding, trig., exp., ...) Random IO streams InputStream / OutputStream, buffering and close / flush Reader / Writer, PrintStream / PrintWriter, console-IO with System.in / System.out, Object Stream files: File networks: URI / URL, http, ftp, file, URLConnection parsing: regular expressions, Pattern, Matcher, Scanner, string-to -number conversion methods, Integer.parseInt (String) / Integer.valueOf, (String) Double.parseDouble (String) / Double.valueOf (String) GUI: events, components, computer components, basic values, lists / hierarchies, containers , layout, dialogues, javax.swing.JOptionPane, JOptionPane.showInputDialog (String) method, JOptionPane.showMessageDialog (null, String) method, showConfirmDialog (null, String) method, YES_OPTION, NO_OPTION, CANCEL_OPTION, toolkits, Swing / AWT, SWT, JavaFX, graphics, Java2D, OpenGL threads: Thread / runnable, monitors, wait, notify / notifyAll, synchronized patterns: delegation, factory, observed-observer testing: eyeballtesting (main and print), unit testing with JUnit, test classes and methods, assert methods, setup and tearDown, testing exceptions"}