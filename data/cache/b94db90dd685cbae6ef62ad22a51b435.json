{"id":"Bruk av debuggeren i Eclipse.txt#content","checksum":"092ae20bf3f33804c4b656cb12a40655","text":"Debugger is a tool used to analyze the running code. It comes with its own perspective, you win by selecting &quot;Debug&quot; in the upper right corner of the screen. If this option is not displayed, press the small white button with a plus sign next, choose Debug from the list and press OK. To get back to the old perspective, select &quot;Java&quot; from the same place. Troubleshooting Break Points When you debug code you have the opportunity to stop in the middle of a running program. Then you need to tell Eclipse where you want the program to stop. This is done by highlighting the code with a breakpoint. You can insert an item by double-clicking in the margin to the left of the line you&#39;re on - then it pops up a small blue circle. Also note that you can select &quot;Break Points&quot; on the top right. Here&#39;s a list of all the points you have added. Troubleshooting When you place breakpoints Eclipse will stop just before the line with breakpointet run. If you start to debug the program in the example above will therefore not know the value of isEven, since it did not exist before the line is executed. You will however learn the value of ISODD since this has just been evaluated. By selecting &quot;Variables&quot; on the top right of the screen you get a list of variables contained in the program, and the value they have. If you just want to know the value of a single variable, you can hover over it in the code window. In order for Eclipse to take into account breakpointene need to run the code in debuggingsmodus. This is right next to the button &quot;Run&quot;. See the figure below. Troubleshooting You are now underway and the program will, as mentioned above, stopping before the first breakpointet it finds. Navigating a stopped program When a program has stopped at a breakpoint, you have different ways to continue on. The two major options are to continue or to step through the code. Continuing means that you run the code until the next breakpoint, while steppe means to execute code lines on command from the user. The main keys to navigate a stopped program is shown below. An explanation of the different buttons, from left to right, are given below. They can come to use by far the most quoted in bold. Resume: code execution until the next breakpoint Suspend: Used to terminate threads (not curriculum) Terminate: Terminates execution Disconnect: Use if you degbugger a program that is not on your local machine (not curriculum) Step into a part of the steppe- function. Going into the next block of code. If there is a method call on the next line to be executed, the Step into taking you into this so you can continue debugging there. Step over: Takes you to the next line of code in the file you are now. If you have a method call on the line will therefore not go into this method. Step return: If you have used Step into to get into a method will return Step take you out again. Drop two frame: Eclipse supports &quot;going backwards&quot;. (??) Use Step Filters: debugger supports to filter out classes you do not want to debug. This feature forces all step buttons to use these filters."}