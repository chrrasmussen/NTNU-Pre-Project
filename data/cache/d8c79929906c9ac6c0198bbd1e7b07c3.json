{"id":"Verdityper og -klasser i java.txt#content","checksum":"292bc879de93d15b1ff6241ceefdc306","text":"In Java, there are a set of primitive data types, such as boolean, char, int, etc. These data types are predefined by the language and is named after its own reserved keyword. The primitive data types do not share state with some of the others. More about the primitive data types in java here, and for more on the use of data types generally Datatyperher. Although some data types are considered primitive in java, these data types are still represented by a value class. That is, for example. char data type can be &quot;wrapped&quot; in a Character Class: Here you can see that java does not differentiate between variables that are initialized through the primitive data type or its corresponding class since these express the exact same opinion. But ... ... they are not the same objects! We can then use the value classes to distinguish between objects, which really expresses the same opinion. This also applies to custom classes and classes contained in the Java libraries. In addition, the different value classes often a set of static methods that are commonly used to interpret or modify data. String and Character class has many such methods. Typical examples: Character Integer Double Character.toLowerCase (char) Integer.parseInt (String) Double.isInfinite (double) Character.isWhitespace (char) Integer.doubleValue (int) Double.parseDouble (string) Character.isDigit (char) Integer. toString (int) Double.compareTo (double) It is also worth noting that the Number classes (Integer, Double, Float, etc) have methods associated with conversion between each other as applied to objects, and not in the static context. Value Classes related to generics Adjacent to Collection framework and generics, we also use value classes. When we declare a new collection, it is often desirable to define what information is to be entered in this, and we will then have to enter the value class information belongs. This is done by adding value class (s) parameter (s) when a class or interface is initialized. This is done by using the &quot;angle brackets&quot; (&lt;&gt;), see example below: We use here Integer since this class &quot;represents&quot; an int main argument for using generics is that we get code that is more type safe at compile time (much easier to find bugs at compile time than runtime). In addition, we avoid casting and it enables implementation of algorithms which work on different data types. More about generics here. Null A special value in java is zero. This value can be arranged to all data types and represents &quot;nothing&quot;. If one sets a value of zero will typically because one wishes to express one of the following uninitialized state condition for termination Non-attenuating object An unknown value A can also return to zero of a function call if one wishes to express that it is not found anything, that no suit or that the result is unknown. Some have strong opinions as to whether the use of zero solves more problems than it creates. In this course it is important to be aware NullPointerException thrown if you try to call methods or access fields from zero. If one for example. expects a String returned, but get zero, this will cause problems unless one tests whether the object is equal / unequal zero: obj == null / obj! = null)."}