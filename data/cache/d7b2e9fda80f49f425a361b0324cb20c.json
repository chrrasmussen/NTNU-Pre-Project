{"id":"Programmer med java.txt#content","checksum":"8714f0036af896f1c69bfcf14562df40","text":"It takes the input of driving this page is intended as an introduction to the structure of programs with Java and the typical way to structure their projects on. Classes: The first thing we note when Java is that it is an object oriented language, which means that we create classes (Class). To keep track of the classes you create and use is very common to have one. Java file for each class. This means that a class named Person will often be found in the file Person.java. When to make one more or less complex program with java, trying often to follow some &quot;guidelines&quot; for how the classes are structured in relation to each other. A neat way to solve this is to separate the user interaction, program flow and logic of having classes that contain one of the three, and not a mixture. A program flow class will typically manage &quot;the next step&quot; in the software once and ask or send information to the other two types of classes. Brukerinteraksjons classes are places where one portrays something the user graphic, or requesting input from the user. These classes tend to talk with each other and with program flow. Logical classes is where we find data and methods that define and change the state of the program. Packages: In Java, all classes belonging to a package (package). The easiest way to look at a package is like a folder in a file system. We often want to structure classes used or belong together in the same package. You can access public classes, their public methods and fields, across the packages. This can be done by importing the entire package or refer to the class using the package: package-name.class-name. Source Code: If you have obtained the source code for one procedural program in both Java and Python (which it is assumed that most readers will be familiar with), many who are new to Java interpret this code as complicated. This section will briefly explain what items you will encounter in the Java source code and hopefully disarm those in their eyes. The first &quot;item&quot; you should be aware of is {at the end of line 1, and the corresponding} on the last line. This defines the start and end of a combined content, often a code block One can hence look at public class My Cool class name as &quot;owner&quot; of the contents of {}. class - This means that the &quot;owner&quot; of the contents of {} is a class. Classes in Java can read more about classes in javaher. public - This defines the visibility of the class. Often working programs with multiple classes, and sometimes one that classes will &quot;know&quot; about each other, sometimes not. More about visibility, see Encapsulation and Synlighetsmodifikatorer. My Cool Class Name - The name of the class. Have chosen a relatively stupid class name, but this is just to illustrate that it may be exactly what you want. Furthermore, it pops up more new and dangerous. The content of the class has a new set {}? static? args? It has now been met at a function, but not any. It is in fact the main feature. This function should be only one place in the source code of your program, and it is from here that &quot;everything starts&quot;. main - Function name. Must heat main to be recognized as the function &quot;start all&quot;. static - it requires some understanding of object-oriented mindset to comprehend what static means. But really (!) Explained simply means static in the function main can be called even if the class is in, is not &quot;in use&quot; yet. Void - The return type of function from. main should therefore not return anything. (String [] args) - brackets shows which parameters the function is called with. String [] defines the args is an array of strings. Features in Java finds Funksjonerher and data types (like array) Datatyperher. System.out.println (3 +9), means very easy just print the consol &quot;what I have in parenthesis&quot;. 3 +9 = 12 Consol after finished running program: 12 Class name is now changed to ImportantNumbers, which is negligible for the execution of the code, but much less stupid. Also, it says something about what to expect from the class. The class has been provided with two fields x and y: x - The name of the field. public - Defines the same manner as previously visibility of fields. Sometimes it is conceivable that it will allow classes know about each other, but &quot;hide&quot; some of the content in class. See Encapsulation and Synlighetsmodifikatorer. int - Specifies the data type of the field is about, here an integer. For those who have good control of variables, a field about the same. A field is a variable that can be accessed from anywhere in the class. That features a class can view and change the fields to the class. For more information on fields, see Classes in Java. In the main function (which we now know how interrelated) declared two new variables Mainxe and mainy. This is the same as with fields x and y, only that they do not need a SynlighetsmodifikatorerSynlighetsmodifikator (eg. Public) because they belong to a function and will be deleted from memory after the function has finished running. In addition to the two variables is also created an object, cult object name, which is also a pretty dumb name, but again to show that the object can be named freely. cult object name - The name of the object, or more precisely, the name of the object reference. ImportantNumbers - Defines the cult object name &quot;is&quot; an object of this type / class. This may be easier to understand if you read about new ImportantNumbers () - This expression creates the object itself. The way Mainxe and mainy are assigned values ​​its called Delegation Delegation engineering technique. It created an object with &quot;important numbers&quot; and the object being &quot;asked / requested&quot; to &quot;enter&quot; x and y, which is okay, since these are public. NB! For those wondering if you could write: System.out.println (kultObjektnavn.x + kultObjektnavn.y), and got the same results, the answer is yes. Mainxe and mainy only variables that divide the procedure. Translation byte-code: When you want to run a program you have source code to the source code is first compiled by the java compiler. The special java compilation is that the source code is translated into byte code that is platform independent. A compiled java file can thus spread to all operating systems and run independently of the operating system compiled source code. This is because all operating systems have their specific Java Virtual Machine, JVM, which translates the Java byte-code machine code that is sitting on the idea. Driving: If you want to run a java program can be done in several ways: via the command line in a developer tool As. Jar file Generally, tests and runs to the code in the developer tool to use. This saves a lot of time, and it requires little to check whether the code is in order for one example. made small changes. If you have developed a program you want to share or be able to start off developer tools in an easy way, en.jar file a feasible option. See how to make one. Jar file in Eclipse Export as jar Filha."}