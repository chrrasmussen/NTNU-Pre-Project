{"id":"Tr√•der med java.txt#content","checksum":"94040e83cb088e16a85439b5385b3f72","text":"Basics To understand how threads in java works, it is important to distinguish between a thread (thread) and a process (process). A process may be viewed as running a program or application. In operating systems (of a multitasking) will often exist multiple processes, each with its own memory space. Any process has at least one thread. A thread is a &quot;lightweight&quot; process that can execute code in a program or application, but will use their resources to process it belongs figure trying to portray (very easy) how a process has a main thread that executes code, and simultaneously creating new threads that executes code in parallel. All three threads share the resources (eg. Reminded) that the process has been assigned. One might ask: why would you perform code in different threads? A common use for multi-threaded programming in applications where there is a client-server architecture. It may be easier to understand with an analogy; Taxi Trondheim AS operates as follows: Twenty-four hour taxi center welcomes inquiries from customers, clarifies which services the customer wants (normal taxi, maxi taxi, time of pickup, etc.), contact a appropriate taxi and leave the client to the taxi driver. Taxi driver will pick as the client, and go where the customer wants to go. When the customer reaches its destination, release the person and the taxi driver stops to wait for a new call from the taxi station. Taxi Trondheim AS has many taxis that can run multiple clients simultaneously. In this example, the entire Taxi Trondheim AS be a process. Taxi service center which welcomes inquiries from customers equals the main thread that runs as long as the process does. When the panel connectors taxis (which just standing still) and assigns the customers, this corresponds to the main thread creates a new thread. After the taxi driver has completed the assignment, run the client where it wishes, stop the taxi driver and the thread ends. But the main thread (taxi station) will of course continue to receive requests. A process (Taxi Trondheim) will thus be many threads (taxis) running simultaneously. Thread Objects For a line item to be used need really only two things: First, we must tell the thread what it is doing in the run method. Then the thread is started. There are two ways to start a new thread. Give a runnable object to a new Thread: Class Taxi implements runnable, an interface that requires taxi has run method. Main method then creates new threads, and they provide a runnable object that tells the thread to run. Then the threads started. This method is more general because runnable object can inherit from another class than Thread. Instansere a class that inherits Thread: The class inherits taxi Thread and can hence be started even. Emphasis behavior (run method) to the thread directly. This method is easier to use in simple applications, but limits the class in that it must inherit Thread. The content provided much useful functionality, eg. Thread.sleep () function. More about functionality in conjunction with threads can be found here."}