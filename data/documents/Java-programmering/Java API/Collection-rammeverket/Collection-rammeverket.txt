<ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | teori |
|| Dekningsgrad | 50 |
|| Omfang | 25 |
|| Ferdig | 95 |]]></ac:plain-text-body></ac:macro><p>En <em>collection </em>er et objekt som representerer en gruppe objekter. Dette brukes <u>mye</u> i programmeringssammenheng, og for &aring; forenkle representasjonen og manipulering av slike objekter har Java-plattformen et eget rammeverk med nyttige strukturer og optimaliserte algoritmer. Foruten &aring; sette en&nbsp;<em>standard</em>, sparer ogs&aring; collection-rammeverket deg for en stor mengde implementasjon som ville tatt masse tid &aring; programmere hver gang du trengte det.</p><p>Basen til rammeverket er fjorten grensesnitt som representerer ulike typer collections som&nbsp;<span><em>sets</em>, <em>lists</em> og <em>maps</em>.<br />P&aring; Oracle sine sider finner man denne tabellen, som oppsummerer implementasjonene av de ulike grensesnittene ganske oversiktelig:<br /><br /><ac:image><ri:attachment ri:filename="collections overview.jpg" /></ac:image>&nbsp;<br /><em>Merk! Her er grensesnittene samlet i fire grupper. Det finnes f.eks. flere grensesnitt av &quot;typen&quot; Set.</em></span></p><h2>Kort om grensesnittene</h2><h4>Set</h4><p>Et&nbsp;<em>set&nbsp;</em>er en collection som ikke kan inneholde duplikate elementer. Grensesnittet representerer den matematiske definisjonen av en&nbsp;<em>mengde,&nbsp;</em>og brukes for eksempel til &aring; holde kortene som utgj&oslash;r en pokerh&aring;nd eller prosessene som kj&oslash;rer p&aring; en datamaskin. Man kan utf&oslash;re en rekke mengde-operasjoner p&aring; et set. Disse og mer om&nbsp;set-grensesnittet finner du&nbsp;<a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/set.html">her</a>.</p><h4>List</h4><p>En&nbsp;<em>list&nbsp;</em>er en ordnet (ikke det samme som sortert) collection som&nbsp;kan inneholde duplikate elementer. N&aring;r man bruker lister har man ofte kontroll over hvor i listen hvert element blir satt inn og kan aksessere elementene ved hjelp av indeksposisjonene deres. Mer om list-grensesnittet&nbsp;<a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/list.html">her</a>.</p><h4>Queue</h4><p>En <em>queue</em>&nbsp;er en collection som brukes til &aring; holde flere elementer i prioritert rekkef&oslash;lge med hensyn til prosessering. For utenom basis collection-operasjoner st&oslash;tter en k&oslash; ekstra innsetting, utplukking og inspeksjons-operasjoner.<br />K&oslash;er ordner vanligvis, men ikke n&oslash;dvendigvis, elementene etter et FIFO (<em>first-in, first-out</em>) system. Andre eksempler er k&oslash;er hvor elementene ordnes etter en gitt sammenlignbar verdi, eller elementenes naturlige ordning.<br />Uansett hvordan k&oslash;en organiseres vil elementet f&oslash;rst i k&oslash;en fjernes dersom man kaller <em>remove&nbsp;</em>eller <em>poll . </em>Mer om queue <a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html">her</a>.</p><h4>Deque</h4><p>En <em>deque&nbsp;</em>fungerer p&aring; samme m&aring;te som som en&nbsp;<em>queue,&nbsp;</em>men i tillegg kan vi legge til, fjerne og se n&aelig;rmere p&aring; elementer i begge ender av k&oslash;en (double-ended queue). Dette gj&oslash;r en deque b&aring;de kan brukes med et FIFO og et LIFO (<em>Last-in, First-out</em>) system. Mer&nbsp;<a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html">her</a>.</p><h4>Map</h4><p>Et&nbsp;<em>map&nbsp;</em>er et objekt som&nbsp;<em>mapper&nbsp;</em>n&oslash;kler til verdier. Et map kan ikke inneholde duplikate n&oslash;kler, og hver n&oslash;kkel kan bare mappe til en verdi. Dersom man har brukt en&nbsp;<em>Hashtabell&nbsp;</em>kjenner man til konseptene bak et map.<br />Maps er ikke en ordnet collection, men ved hjelp av n&oslash;kkelen kan man gj&oslash;re oppslag i konstant tid.<br />Mer om maps <a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/map.html">her</a>.&nbsp;</p>