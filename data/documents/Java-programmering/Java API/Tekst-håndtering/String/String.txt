<ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | teori |
|| Dekningsgrad | 75 |
|| Omfang | 75 |
|| Ferdig | 100 |]]></ac:plain-text-body></ac:macro><h3>String-klassen</h3><p>En <code>String</code> er en sekvens med tegn (char-verdier) og har metoder for &aring; 1) lese ut enkelttegn eller deler av tegnsekvensen, eller 2) lage ny <code>String</code>-instanser basert p&aring; deler av innholdet. Merk at det ikke finnes metoder i <code>String</code> som endrer p&aring; innholdet, s&aring; <code>String</code> vil derfor i praksis fungere som verdier. Istedet for &aring; endre p&aring; innholdet bygger en opp nye <code>String</code>-instanser med innhold fra eksisterende. For &aring; gj&oslash;re dette lettere, har Java egen syntaks for <code>String</code>-konstanter, +-operatoren kan brukes for &aring; sette samme <code>String</code>-instanser og verdier og objekter gj&oslash;res automatisk om til <code>String</code>-instanser i mange sammenhenger. F&oslash;lgende kode illustrerer flere av disse:</p><ac:macro ac:name="code"><ac:default-parameter>java</ac:default-parameter><ac:plain-text-body><![CDATA[String s = "Dette er en String";
String melding = "Første bokstav i " + s + " er " + s.charAt(0);
System.out.println(melding);
]]></ac:plain-text-body></ac:macro><p>F&oslash;rst initialiseres variabelen <code>s</code> til en <code>String</code> som inneholder tegnsekvensen D, e, t, t, e, , e, r, , e, n, , S, t, r, i, n, g.<br /> Deretter initialiseres <code>melding</code>-variabelen vha. +-operatoren til sammensetningen av <code>String</code>'en &quot;F&oslash;rste bokstav i&quot;, <code>String</code>-instansen som s refererer til, &quot; er &quot; og det f&oslash;rste tegnet i <code>s</code> (posisjon 0). Dette skal gi en <code>String</code> med tegnene &quot;F&oslash;rste bokstav i Dette er en <code>String</code> er D&quot;, som alts&aring; er det <code>melding</code> initialiseres til. Denne blir s&aring; skrevet ut av <code>System.out.println</code>.</p><p>En alternativ kodelinje som gir samme resultat er f&oslash;lgende:</p><ac:macro ac:name="code"><ac:default-parameter>java</ac:default-parameter><ac:plain-text-body><![CDATA[System.out.println("Første bokstav i Dette er en String er " + "Dette er en String".substring(0, 1));
]]></ac:plain-text-body></ac:macro><p>Her ser vi at <code>String</code>'en som <code>s</code> ble initialisert til i sted, n&aring; er lagt direkte inn i et uttrykk som brukes som argument til <code>println</code>. Merk spesielt at en faktisk kan kalle en metode p&aring; <code>String</code>'en direkte, istedetfor &aring; bruke en variabel (kjekt ved testing av <code>String</code>-metoder). For det andre brukes <code>String</code>-metoden <code>substring</code> istedenfor <code>charAt</code>, for &aring; hente ut den f&oslash;rste bokstaven i <code>&quot;Dette er en String&quot;</code>.</p><p>Her er noen nyttige <code>String</code>-metoder som det bare er &aring; l&aelig;re seg f&oslash;rst som sist:</p><ul class="alternate"><li><code>char charAt(int n)</code> returnerer tegnet i posisjon <code>n</code>, hvor det f&oslash;rste tegnet har posisjon 0. F.eks. vil <code>&quot;abc&quot;.charAt(1)</code> returnere tegnet b.</li><li><code>int indexOf(char c)</code> returnerer posisjonen til det f&oslash;rste tegnet som er lik <code>c</code>, og eller -1, hvis tegnet ikke finnes i denne <code>String</code>'en. F.eks. vil <code>&quot;abc&quot;.indexOf('b')</code> returnere 1.</li><li><code>int indexOf(String s)</code> returnerer posisjonen i denne <code>String</code>'en hvor hele innholdet i <code>s</code> finnes og eller -1. F.eks. vil <code>&quot;abc&quot;.indexOf(&quot;bc&quot;)</code> returnere 1.</li><li><code>boolean contains(String s)</code> returnerer om denne <code>String</code>'en innholder innholdet i <code>s</code> et eller annet sted. F.eks. vil <code>&quot;abc&quot;.contains(&quot;bc&quot;)</code> returnere <code>true</code>.</li><li><code>boolean startsWith(String s)</code> returnerer <code>true</code> hvis denne <code>String</code>'en <em>starter med</em> bokstavene i <code>s</code> (i samme rekkef&oslash;lge), ellers returneres <code>false</code>. F.eks. vil <code>&quot;abc&quot;.startsWith(&quot;ab&quot;)</code> returnere <code>true</code>.</li><li><code>boolean endsWith(String s)</code> returnerer <code>true</code> hvis denne <code>String</code>'en <em>slutter med</em> bokstavene i <code>s</code> (i samme rekkef&oslash;lge), ellers returneres <code>false</code>. F.eks. vil <code>&quot;abc&quot;.endsWith(&quot;bc&quot;)</code> returnere <code>true</code>.</li><li><code>String substring(int start, int end)</code> returnerer en ny <code>String</code>-instans med bokstavene fra (om med) posisjon <code>start</code> til (men ikke med) posisjon <code>end</code>. F.eks. vil <code>&quot;abc&quot;.substring(2, 3)</code> returnere <code>&quot;c&quot;</code>.</li><li><code>String substring(int start)</code> returnerer en ny <code>String</code>-instans med bokstavene fra (og med) posisjon <code>start</code> til enden. F.eks. vil <code>&quot;abc&quot;.substring(1)</code> returnere <code>&quot;bc&quot;</code>.</li></ul>