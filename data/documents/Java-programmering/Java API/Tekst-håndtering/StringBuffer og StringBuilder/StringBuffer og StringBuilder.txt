<ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | teori |
|| Dekningsgrad | 100 |
|| Omfang | 50 |
|| Ferdig | 95 |]]></ac:plain-text-body></ac:macro><p><em>StringBuffer</em>&nbsp;og&nbsp;<em>StringBuilder&nbsp;</em>er klasser som brukes dersom man har behov for &aring; gj&oslash;re et st&oslash;rre antall manipulasjoner av strenger med&nbsp;<em>characters</em><em>.&nbsp;</em>Klassene vil ha vesentlig bedre ytelse enn ved kontinuerlig manipulasjon av en <em>String.&nbsp;</em>Som man kan lese&nbsp;<ac:link><ri:page ri:content-title="String" /><ac:plain-text-link-body><![CDATA[her]]></ac:plain-text-link-body></ac:link>, kan man ikke forandre en <em>String,&nbsp;</em>men bruke hele eller deler av innholdet til &aring; lage en ny&nbsp;<em>String</em>. Ved &aring; bruke&nbsp;<em>StringBuffer&nbsp;</em>eller&nbsp;<em>StringBuilder&nbsp;</em>til &aring; modifisere eller bygge en streng over mange operasjoner kan man alts&aring; unng&aring; &aring; etterlate en stor mengde nye ubrukte&nbsp;<em>String</em>-objekter.&nbsp;</p><table><tbody><tr><th><p>&nbsp;</p><ac:macro ac:name="code"><ac:parameter ac:name="title">StringBuilder</ac:parameter><ac:parameter ac:name="language">java</ac:parameter><ac:plain-text-body><![CDATA[public class Test{
    public static void main(String args[]){

       StringBuilder sBuilder = new StringBuilder("Testing ");
       sBuilder.append("simple usage of ");
       sBuilder.append("StringBuilder");


       System.out.println(sBuilder);  
   }
}]]></ac:plain-text-body></ac:macro><p>&nbsp;</p></th></tr></tbody></table><h2>Buffer vs Builder</h2><p>Forskjellen mellom de to klassene er i all hovedsak at <em>StringBuffer&nbsp;</em>er synkronisert, og&nbsp;<em>StringBuilder&nbsp;</em>er ikke. Dette vil si at&nbsp;<em>StringBuffer&nbsp;</em>er sikker i bruk p&aring; tvers av&nbsp;<ac:link><ri:page ri:content-title="Tr&aring;der med java" /><ac:plain-text-link-body><![CDATA[trÃ¥der]]></ac:plain-text-link-body></ac:link> (<em>Threads</em>), men siden dette sjeldent er en problemstilling ble&nbsp;<em>StringBuilder-</em>klassen innf&oslash;rt, bare uten synkroniseringen. Dette f&oslash;rer til at en <em>StringBuilder&nbsp;</em>i nesten alle tilfeller er raskere enn en&nbsp;<em>StringBuffer,&nbsp;</em>og foretrekkes dersom man kan se bort fra tr&aring;dsikkerhet.&nbsp;</p><h2>Viktige metoder</h2><p>I tillegg til at&nbsp;<em>StringBuilder </em>omtrent er &aring; regne<em>&nbsp;</em>som &quot;&eacute;n-tr&aring;ds-versjonen&quot; av&nbsp;<em>StringBuffer,&nbsp;</em>har klassene nesten identisk API og de f&oslash;lgende metodene er gjeldende for begge.</p><ul style="list-style-type: square;"><li><em>append(String s) -&nbsp;</em>Legger til <em>s&nbsp;</em>p&aring; slutten av en&nbsp;<em>StringB.</em></li><li><em>reverse() -&nbsp;</em>Reverserer <em>StringB'en</em> metoden blir kalt p&aring;.</li><li><em>delete(int start, int end)&nbsp;</em>- Sletter elementene i <em>StringB'en&nbsp;</em>fra og med <em>start,&nbsp;</em>til (men ikke med)&nbsp;<em>end</em></li><li><em>insert(int offset, String s)&nbsp;</em>- Setter inn <em>s</em> p&aring; posisjon <em>offset</em></li><li><em>replace(int start, int end, String s)&nbsp;</em>- Erstatter en <em>substring&nbsp;</em>fra&nbsp;<em>start&nbsp;</em>til&nbsp;<em>end&nbsp;</em>med&nbsp;<em>s.</em></li></ul><p>Mer om <em>StringBuilder </em>og<em>&nbsp;</em><em>StringBuffer,&nbsp;</em>samt full oversikt over metoder finnes&nbsp;<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">her</a>.</p>