<p><ac:macro ac:name="htmlcomment"><ac:parameter ac:name="hidden">true</ac:parameter><ac:parameter ac:name="atlassian-macro-output-type">INLINE</ac:parameter><ac:rich-text-body><p>Her trengs det input om kj&oslash;ring</p></ac:rich-text-body></ac:macro><span style="color: rgb(34,34,34);font-size: 10.0pt;line-height: 13.0pt;">Denne siden er ment som en introduksjon til oppbygningen av programmer med Java og den typiske m&aring;ten man strukturerer prosjektene sine p&aring;.&nbsp;</span></p><p><span style="color: rgb(34,34,34);"><span style="font-size: 10.0pt;line-height: 13.0pt;"><strong>Klasser:</strong>&nbsp;<br /></span></span><span style="font-size: 10.0pt;line-height: 13.0pt;">Det f&oslash;rste &nbsp;vi merker oss ved Java er at det er et objektorientert spr&aring;k, hvilket inneb&aelig;rer at vi lager&nbsp;</span><em style="font-size: 10.0pt;line-height: 13.0pt;">klasser (Class).&nbsp;</em><span style="font-size: 10.0pt;line-height: 13.0pt;">For &aring; ha oversikt over klassene man lager og bruker er det veldig vanlig &aring; ha en .java-fil for hver klasse.<br /></span><span style="color: rgb(34,34,34);font-size: 10.0pt;line-height: 13.0pt;">Dette vil si at en klasse med navn&nbsp;</span><em style="color: rgb(34,34,34);font-size: 10.0pt;line-height: 13.0pt;">Person&nbsp;</em><span style="color: rgb(34,34,34);font-size: 10.0pt;line-height: 13.0pt;">ofte vil finnes i filen </span><em style="color: rgb(34,34,34);font-size: 10.0pt;line-height: 13.0pt;">Person.java .</em></p><p>N&aring;r man skal lage ett mer eller mindre komplekst program med java, pr&oslash;ver man ofte &aring; f&oslash;lge noen &quot;retningslinjer&quot; for hvordan klassene er strukturert i forhold til hverandre. En ryddig m&aring;te &aring; l&oslash;se dette p&aring; er &aring; skille&nbsp;<em>brukerinteraksjon,&nbsp;<em>programflyt</em></em>&nbsp;og&nbsp;<em>logikk&nbsp;</em>ved &aring; ha klasser som inneholder &eacute;n av de tre, og ikke en blanding.</p><ul style="list-style-type: square;"><li>En&nbsp;<em>programflyt-</em>klasse vil typisk styre &quot;neste steg&quot; i programmets gang og sp&oslash;rre eller sende informasjon til de to andre typene klasser.&nbsp;</li><li><em>Brukerinteraksjons-</em>klasser er steder hvor man framstiller noe for brukeren grafisk, eller ber om input fra brukeren.<em>&nbsp;</em>Disse klassene snakker gjerne med hverandre, og med&nbsp;<em>programflyt.</em></li><li><em>Logikk-klasser&nbsp;</em>er stedet hvor vi finner data og metoder som definerer og forandrer programmets tilstand.&nbsp;</li></ul><p><span style="color: rgb(34,34,34);"><strong>Pakker:</strong><br />I Java m&aring; alle klasser tilh&oslash;re en&nbsp;<em>pakke (package).&nbsp;</em>Den enkleste m&aring;ten &aring; se p&aring; en pakke, er som en mappe i et filsystem. Vi &oslash;nsker ofte &aring; strukturere&nbsp;<em>klasser</em>&nbsp;som brukes eller h&oslash;rer sammen&nbsp;i samme&nbsp;<em>pakke.</em>&nbsp;<span style="color: rgb(34,34,34);">Man kan aksessere&nbsp;</span><em>public&nbsp;</em><span style="color: rgb(34,34,34);">klasser, deres&nbsp;</span><em>public&nbsp;</em><span style="color: rgb(34,34,34);">metoder og felt, p&aring; tvers av pakkene. Dette kan gj&oslash;res ved &aring; importere hele pakken eller referere til klassen ved hjelp av pakken:&nbsp;</span><em>package-name.class-name.</em><br /></span></p><p><span style="color: rgb(34,34,34);"><strong style="color: rgb(0,0,0);font-size: 10.0pt;line-height: 13.0pt;"><span style="color: rgb(34,34,34);">Kildekode:</span></strong><span style="color: rgb(34,34,34);"><br /></span></span><span style="color: rgb(34,34,34);">Om man f&aring;r framstilt kildekoden til ett enkelt prosedyreorientert program i b&aring;de Java og Python (som det antas at de fleste lesere vil v&aelig;re kjent med), vil mange som er nye med Java oppfatte denne koden som komplisert. Dette avsnittet skal kort forklare hvilke elementer man vil m&oslash;te p&aring; i Java-kildekode og forh&aring;pentligvis avv&aelig;pne de i deres &oslash;yne.</span></p><table><tbody><tr><th><p>&nbsp;</p><ac:macro ac:name="code"><ac:parameter ac:name="title">Basic elements</ac:parameter><ac:parameter ac:name="language">java</ac:parameter><ac:plain-text-body><![CDATA[public class MittKuleKlassenavn {
 
	public static void main(String[] args) {
 
		System.out.println(3+9);
	}
}]]></ac:plain-text-body></ac:macro><p>Det f&oslash;rste &quot;elementet&quot; man burde v&aelig;re klar over, er { p&aring; slutten<br />av linje 1, og den motsvarende } p&aring; siste linje. Dette definerer<br />starten og slutten p&aring; et samlet innhold, ofte en <em>kodeblokk</em><br />Man kan derav se p&aring; <em>public class MittKuleKlassenavn </em>som &quot;eier&quot;<br />av innholdet i { }.</p><ol><li><em>class - </em>Dette betyr at &quot;eieren&quot; av innholdet i { } er en klasse.<br />Klasser i java kan man lese mer om <ac:link><ri:page ri:content-title="Klasser i java" /><ac:plain-text-link-body><![CDATA[her]]></ac:plain-text-link-body></ac:link>.</li><li><em>public</em> - Dette definerer <em>synligheten </em>til klassen. Ofte jobber<br />programmer med flere klasser, og noen ganger vil man at <br />klassene skal &quot;vite&quot;&nbsp;om hverandre, andre ganger ikke.<br />Mer om synlighet, se <ac:link><ri:page ri:content-title="Innkapsling" /></ac:link> og <ac:link><ri:page ri:content-title="Synlighetsmodifikatorer" /></ac:link>.</li><li><em>MittKuleKlassenavn - </em>Navnet p&aring; klassen. Har her valgt et<br />forholdsvis teit klassenavn, men dette er bare for &aring; illustrere<br />at det kan v&aelig;re akkurat det man &oslash;nsker.</li></ol><p><span>Videre dukker det opp mer nytt og farlig. Innholdet til klassen<br />har </span>et nytt sett { }&nbsp;? static? args? <br /><span>Det man n&aring; har m&oslash;tt p&aring; er en funksjon, men ikke hvilken som<br />helst. Det er nemlig <em>main-</em>funksjonen. &nbsp;Denne funksjonen skal<br />bare finnes ett sted i kildekoden til programmet ditt, og det er <br />herfra &quot;alt begynner&quot;. </span></p><ol><li><em>main - </em>Funksjonsnavnet. M&aring; hete <em>main </em>for &aring; gjennkjennes<br />som funksjonen som &quot;starter alt&quot;&nbsp;.</li><li>s<em>tatic - </em>Det krever en del forst&aring;else av objektorientert-<br /><span style="font-size: 10.0pt;line-height: 13.0pt;">tankegang for &aring; fatte hva <em>static </em>betyr. Men veldig(!) enkelt<br />forklart betyr <em>static</em>&nbsp;her at funksjonen <em>main </em>kan kalles selv<br />om klassen den befinner seg i, ikke er &quot;tatt i bruk&quot; enda.</span></li><li><em>void - </em>Returtypen til funskjonen. <em>main </em>skal alts&aring; ikke <br />returnere noe.</li><li><em>(String[] args) </em>- &nbsp;Parentesene viser hvilke parametere<br />funksjonen kalles med. <em>String[] </em>definerer at <em>args </em>er et array&nbsp;<br />med&nbsp;strenger. Mer om funksjoner i Java finner man <ac:link><ri:page ri:content-title="Funksjoner" /><ac:plain-text-link-body><![CDATA[her]]></ac:plain-text-link-body></ac:link>,<br />og datatyper (som array)&nbsp;<ac:link><ri:page ri:content-title="Datatyper" /><ac:plain-text-link-body><![CDATA[her]]></ac:plain-text-link-body></ac:link>.</li></ol><p><em>System.out.println(3+9); </em>betyr veldig enkelt bare skriv ut til<br />consol &quot;det jeg har i parentes&quot;.&nbsp;3+9 = 12.<br /><br />Consol etter ferdigkj&oslash;rt program:<br />12</p></th><th colspan="1"><p>&nbsp;</p><ac:macro ac:name="code"><ac:parameter ac:name="title">Basic elements 2</ac:parameter><ac:parameter ac:name="language">java</ac:parameter><ac:plain-text-body><![CDATA[public class ImportantNumbers {
 
	public int x = 3;
	public int y = 9;
	
	public static void main(String[] args){
		
		ImportantNumbers kultObjektnavn = new ImportantNumbers();
		
		int mainX = kultObjektnavn.x;
		int mainY = kultObjektnavn.y;
 
		System.out.println(mainX+mainY);	 
	} 
} ]]></ac:plain-text-body></ac:macro><p><span style="font-size: 10.0pt;line-height: 13.0pt;">Klassenavnet er n&aring; forandret til </span><em style="font-size: 10.0pt;line-height: 13.0pt;">ImportantNumbers, </em>noe som er ubetydelig for utf&oslash;relsen <br />av koden, men mye mindre teit. Dessuten sier det noe om hva man kan forvente av<br />klassen. Klassen har n&aring; f&aring;tt tilf&oslash;rt to felt x &amp; y:</p><ol><li><em>x </em>- Navnet til feltet.</li><li><em>public - </em>Definerer p&aring; samme m&aring;te som tidligere synligheten av feltene. Noen ganger<br />kan det tenkes at man vil la klasser vite om hverandre, men &quot;skjule&quot;&nbsp;noe av innholdet<br />i klassen. Se <ac:link><ri:page ri:content-title="Innkapsling" /></ac:link><span> og </span><ac:link><ri:page ri:content-title="Synlighetsmodifikatorer" /></ac:link>.</li><li><em>int </em>- Angir hvilken datatype feltet holder p&aring;, her et heltall. For de som har god<br />kontroll p&aring; <ac:link><ri:page ri:content-title="Variabler" /></ac:link>, er et felt omtrent det samme. Et felt er en variabel som kan n&aring;s<br />fra hvor som helst i klassen. Det vil si at funksjoner en klasse har, kan se og forandre<br />feltene til klassen.&nbsp;For mer om felter, se <ac:link><ri:page ri:content-title="Klasser i java" /></ac:link>.</li></ol><p>I<em> main-</em><span>funksjonen (som man n&aring; vet hvordan henger sammen) deklareres det to nye<br />variabler <em>mainX </em>og <em>mainY. </em>Dette skjer p&aring; samme m&aring;te som med feltene <em>x </em>og <em>y, </em>bare at<br />de <u><strong>ikke</strong></u> trenger en <ac:link><ri:page ri:content-title="Synlighetsmodifikatorer" /><ac:plain-text-link-body><![CDATA[Synlighetsmodifikator]]></ac:plain-text-link-body></ac:link> (f.eks. <em>public</em>) fordi de h&oslash;rer til i en funksjon og<br />vil slettes fra minnet etter funksjonen har kj&oslash;rt ferdig.<br /></span></p><p><span>I tillegg til de to <em>variablene </em>opprettes det ogs&aring; et <em>objekt, </em><em>kultObjektnavn</em>, noe som ogs&aring;<br />er et temmelig teit navn, men igjen for &aring; vise at <em>objektet </em>kan navngis fritt.</span></p><ol><li><span style="font-size: 10.0pt;line-height: 13.0pt;"><em>kultObjektnavn - </em>Navnet p&aring; objektet, eller mer presist, navnet p&aring; <em>objektreferansen.</em></span></li><li><span style="font-size: 10.0pt;line-height: 13.0pt;"><em>ImportantNumbers - </em>Definerer at <em>kultObjektnavn </em>&quot;er&quot; et objekt av denne<br />typen/klassen.&nbsp;Dette kan v&aelig;re lettere &aring; forst&aring; om man leser om </span></li><li><span style="font-size: 10.0pt;line-height: 13.0pt;"><em>new ImportantNumbers() - </em>Dette uttrykket oppretter selve objektet.</span></li></ol><p><span style="font-size: 10.0pt;line-height: 13.0pt;">M&aring;ten <em>mainX </em>og <em>mainY </em>f&aring;r tildelt verdiene sine kalles <em><ac:link><ri:page ri:content-title="Delegeringsteknikken" /><ac:plain-text-link-body><![CDATA[delegeringsteknikken]]></ac:plain-text-link-body></ac:link>. </em>Det er <br />opprettet et objekt med &quot;viktige numre&quot;, og objektet blir &quot;bedt/spurt&quot; om &aring; &quot;oppgi&quot; <em>x </em><br />og <em>y,</em> noe som g&aring;r helt greit, siden disse er <em>public.</em></span></p><p><span style="font-size: 10.0pt;line-height: 13.0pt;">NB! For de som lurer p&aring; om man kunne skrevet: <br /><em>System.out.println(kultObjektnavn.x + kultObjektnavn.y); <br /></em>og f&aring;tt samme resultat, er svaret ja. <em>mainX </em>og <em>mainY </em>er bare variabler som deler opp<br />framgangsm&aring;ten.<br /><br /></span></p></th></tr></tbody></table><p><strong style="font-size: 10.0pt;line-height: 13.0pt;"><span style="color: rgb(34,34,34);">Oversettelse</span><span style="color: rgb(34,34,34);"> byte-kode:</span></strong></p><p><span style="color: rgb(34,34,34);">N&aring;r&nbsp;man &oslash;nsker &aring; kj&oslash;re et programmet man har kildekode til m&aring; kildekoden f&oslash;rst kompileres av java-kompilatoren. Det spesielle med java-kompilering er at kildekoden oversettes til byte-kode som er plattformuavhengig. En kompilert java-fil kan alts&aring; spres til alle operativsystemer og kj&oslash;res uavhengig av hvilket operativsystem som kompilerte kildekoden. Dette kommer av at alle operativsystemer har sin spesifikke Java Virtual Machine, JVM, som oversetter java byte-kode til kode som maskinen man sitter p&aring; skj&oslash;nner.</span></p><p><strong><span style="color: rgb(34,34,34);">Kj&oslash;ring:</span></strong></p><p><span style="color: rgb(34,34,34);">Om man vil kj&oslash;re et java-program kan dette gj&oslash;res p&aring; flere m&aring;ter:</span></p><ol style="list-style-type: square;"><li><span style="color: rgb(34,34,34);">Via kommandolinje</span><span style="color: rgb(34,34,34);"><br /></span></li><li><span style="color: rgb(34,34,34);">I et utviklerverkt&oslash;y</span></li><li><span style="color: rgb(34,34,34);">Som en .jar-fil</span><span style="color: rgb(34,34,34);"><br /></span></li></ol><p><span style="color: rgb(34,34,34);">Som regel tester og kj&oslash;rer man koden i utviklerverkt&oslash;yet man bruker. Dette sparer mye tid, og det krever lite &aring; sjekke om koden er i orden etter man f.eks. har gjort sm&aring; forandringer.<br />Om man har utviklet et program man &oslash;nsker &aring; dele eller kunne starte utenom utviklerverkt&oslash;yet p&aring; en lett m&aring;te, er en.jar-fil et mulig alternativ. Se hvordan man kan lage en .jar-fil i Eclipse&nbsp;<ac:link><ri:page ri:content-title="Eksportere som jar-fil" /><ac:plain-text-link-body><![CDATA[her]]></ac:plain-text-link-body></ac:link>.<br />&nbsp;</span></p><ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | teori |
|| Dekningsgrad | 25 |
|| Omfang | 25 |
|| Ferdig | 50 |]]></ac:plain-text-body></ac:macro>