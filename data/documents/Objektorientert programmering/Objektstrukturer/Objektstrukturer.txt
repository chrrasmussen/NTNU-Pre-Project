<ac:macro ac:name="excerpt"><ac:parameter ac:name="atlassian-macro-output-type">BLOCK</ac:parameter><ac:rich-text-body><p>De fleste programmer vil best&aring; av mange klasser, som det vil lages mange instanser av ved kj&oslash;ring. Disse instansene vil v&aelig;re koblet sammen i et nettverk, ogs&aring; kalt objekt<em>graf</em>, og begreper som tilstand og oppf&oslash;rsel kan generaliseres til &aring; dekke objektgrafer, ikke bare enkeltobjekter.</p></ac:rich-text-body></ac:macro><p>Det finnes hovedsaklig to grunner til &aring; lage strukturer av objekter:</p><ol><li>Objektstrukturer er en naturlig representasjon av verden rundt oss og dermed ogs&aring; dataene i en applikasjon. F.eks. vil et familietre inneholde et hierarki av objekter, med koblinger for familieforhold som giftem&aring;l/partnerskap og foreldre/barn. Dette er s&aring;kalte <ac:link><ri:page ri:content-title="Data- eller tilstandsorienterte objekter" /><ac:plain-text-link-body><![CDATA[data- eller tilstandsorienterte klasser]]></ac:plain-text-link-body></ac:link>.<br /><br /></li><li>Mange programmer inneholder s&aring; mye funksjonalitet at en er n&oslash;dt til &aring; dele det opp i mindre, funksjonelle enheter for &aring; f&aring; ned kompleksiteten og fordele kodingen p&aring; flere utviklere. Ved objektorientert programmering er disse funksjonelle enhetene klasser som er koblet sammen i strukturer ut fra hvordan de bruker hverandre. F.eks. vil en gjerne ha egne objekter som h&aring;ndterer lagring i databaser og kommunikasjon over nett, som brukes av andre deler av programmet. Dette er s&aring;kalte <ac:link><ri:page ri:content-title="Tjenesteorienterte objekter" /><ac:plain-text-link-body><![CDATA[tjenesteorienterte objekter]]></ac:plain-text-link-body></ac:link>.</li></ol><p>I de fleste applikasjoner vil begge disse grunnene for oppdeling i flere klasser v&aelig;re relevante, dvs. en vil ha strukturer av b&aring;de data- og tjenesteorienterte objekter. Og selv for de minste applikasjonene er det vanlig &aring; i det minste ha en hovedprogramklasse, som h&aring;ndterer kommunikasjonen med brukeren, og en klasse som h&aring;ndterer den underliggende logikken og tilbyr dette som en tjeneste til hovedprogramklassen. Se <ac:link><ri:page ri:content-title="Memory-eksempel versjon 1" /></ac:link> for et enkelt eksempel p&aring; dette.</p><p>Uansett grunnen for &aring; dele et program opp i flere klasser, s&aring; vil en typisk beskrive slike strukturer med f.eks. UML sin klassediagramtype. Alle programmerere m&aring; kunne &quot;oversette&quot; slike diagrammer til kode, dvs. vite hvordan UML sine klasse- og assosiasjonsbegreper realiseres i et objektorientert spr&aring;k som Java.</p><ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | oversikt |
|| Ferdig | 25 |
|| Dekningsgrad | 25 |
|| Omfang | 25 |]]></ac:plain-text-body></ac:macro>