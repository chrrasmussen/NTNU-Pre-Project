<p>Diagrammer brukes mye for &aring; hjelpe oss &aring; tenke klarere om b&aring;de programmering, b&aring;de hva som skjer eller &oslash;nsker at skal skje n&aring;r et program kj&oslash;res og hvordan koden er utformet. Fordelen med diagrammer er dels at de hever seg litt over detaljer som skygger for fors&aring;elsen (abstraksjon) og at den visuelle formen er mer intuitiv enn tekstlige. I tillegg til &aring; hjelpe oss &aring; tenke, kan ogs&aring; diagrammer brukes som en slags visuell programmering ved &aring; koble diagram og kode mer direkte.</p><p>Diagrammer er i denne sammenheng av boks-og-pil-typen, hvor bokser av ulike typer/fasonger kobles sammen med streker, hvor b&aring;de bokser og streker er annotert med tekst og symboler. Et vesentlig poeng er at det ofte finnes klare regler for hvordan notasjonen (de ulike typer diagramelementer) brukes og settes sammen, kort sagt at alt i et diagram betyr noe. Diagrammer innen programvareutvikling er ofte basert p&aring; UML-<em>standarden</em> (the Unified Modeling Language), hvor notasjonen er sv&aelig;rt veldefinert. Dette betyr ikke at en ikke kan bruke diagrammer uformelt som skisser, men at en skal v&aelig;re litt bevisst reglene for bruk av notasjonen.</p><h2>Diagramtyper</h2><p>Grovt sett beskriver diagrammer to ulike aspekter ved et program:</p><ol><li>hva som skjer n&aring;r programmet kj&oslash;res, f.eks. tilstanden til objektstrukturer, og</li><li>hvordan programkoden er strukturert, f.eks. hvilke klasser som finnes og hvordan de henger sammen.</li></ol><p><ac:link><ri:page ri:content-title="Objektdiagrammer" /></ac:link> er en diagramtype som viser tilstanden til et program, ved &aring; &quot;snapshots&quot; av <ac:link><ri:page ri:content-title="Objektstrukturer" /><ac:plain-text-link-body><![CDATA[objektstrukturer]]></ac:plain-text-link-body></ac:link>. Hvis en tenker p&aring; objektdiagrammer som tilstander og kobler dem sammen med transisjoner, alts&aring; et slags <ac:link><ri:page ri:content-title="Objekttilstandsdiagrammer" /><ac:plain-text-link-body><![CDATA[objekttilstandsdiagram]]></ac:plain-text-link-body></ac:link>, kan en vise hvordan objektstrukturer utvikler seg over tid.</p><p><ac:link><ri:page ri:content-title="Klassediagrammer" /><ac:plain-text-link-body><![CDATA[Klassediagrammer]]></ac:plain-text-link-body></ac:link> viser klassestrukturen til et program, med innholdet i klasser (attributter og operasjoner) og hvordan de er koblet sammen med arv og assosiasjoner.</p><p>Interaksjonsdiagrammer viser hvordan objekter i en <ac:link><ri:page ri:content-title="Objektstrukturer" /><ac:plain-text-link-body><![CDATA[objektstruktur]]></ac:plain-text-link-body></ac:link> bruker hverandre, dvs. kaller hverandres metoder. Det finnes to varianter: <ac:link><ri:page ri:content-title="Samhandlingsdiagrammer" /><ac:plain-text-link-body><![CDATA[samhandlingsdiagrammer]]></ac:plain-text-link-body></ac:link> utvider <ac:link><ri:page ri:content-title="Objektdiagrammer" /><ac:plain-text-link-body><![CDATA[objektdiagrammer]]></ac:plain-text-link-body></ac:link> med visning av (sekvenser av) metodekall, og <ac:link><ri:page ri:content-title="Sekvensdiagrammer" /><ac:plain-text-link-body><![CDATA[sekvensdiagrammer]]></ac:plain-text-link-body></ac:link> viser metodekall mellom objekter langs en tidslinje.</p><p>&nbsp;</p><ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | oversikt |
|| Ferdig | 95 |
|| Dekningsgrad | 25 |
|| Omfang | 25 |]]></ac:plain-text-body></ac:macro>