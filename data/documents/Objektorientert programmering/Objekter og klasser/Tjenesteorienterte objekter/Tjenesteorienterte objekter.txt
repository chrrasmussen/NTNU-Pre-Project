<p>Noen objekter er <ac:link><ri:page ri:content-title="Data- eller tilstandsorienterte objekter" /><ac:plain-text-link-body><![CDATA[dataorienterte]]></ac:plain-text-link-body></ac:link>og har hovedsaklig getter- og setter-metoder.&nbsp;<ac:macro ac:name="excerpt"><ac:parameter ac:name="atlassian-macro-output-type">INLINE</ac:parameter><ac:rich-text-body><p>De <em>tjenesteorienterte</em> objektene er fokusert p&aring; beregninger og operasjoner p&aring; data, som gjerne ligger utenfor objektet.</p></ac:rich-text-body></ac:macro>Et eksempel p&aring; et tjenesteorientert objekt er en <em>logger</em>, som er et objekt med metode(r) for &aring; registrere og formidle feil, advarsler eller annen informasjon om situasjoner som oppst&aring;r under kj&oslash;ring av programmer. Informasjonen som registreres brukes gjerne av de som utvikler og overv&aring;ker et system, for &aring; hjelpe en &aring; diagnostisere feil og problemer. En slik logger tilbyr hovedsaklig en <strong>log</strong>-metode, f.eks. <strong>void log(String message, int severity, Exception ex)</strong>, for &aring; registrere en melding (<strong>message</strong>) av en bestemt alvorlighetsgrad (<strong>severity</strong>) evt. knyttet til et (utl&oslash;st) unntak (<strong>ex</strong>). Ved &aring; velge en spesifikk &quot;leverand&oslash;r&quot; eller implementasjon av tjenesten, s&aring; kan en styre om informasjonen om situasjonen skal lagres til fil, skrives ut p&aring; et konsoll eller kanskje sendes i en alarmerende SMS. Det kan tenkes at loggeren har litt interne data, men dette er ikke applikasjonsdata og metodene har ikke som form&aring;l &aring; kapsle inn tilstanden.</p><p>Et annet eksempel p&aring; et tjenesteorientert objekt er en &quot;sammenligner&quot;, dvs. et objekt som kan sammenligne to (andre) objekter og bestemme hvilken som skal komme f&oslash;rst i henhold til en &oslash;nsket sortering. Et slikt objekt kan gis til en sorteringsalgoritme og styre den totale ordningen, f.eks. at personer sorteres f&oslash;rst p&aring; f&oslash;dselsdato og s&aring; evt. p&aring; etternavn og fornavn. Et slikt objekt gj&oslash;r egentlig fint lite, men er likevel nyttig fordi det lar en velge sorteringsordning uavhengig av algoritme. Sammenligningen er skilt ut som en egen tjeneste nettopp for at vi skal kunne velge en &quot;leverand&oslash;r&quot; tilpasset v&aring;rt spesifikke behov.</p><p>I praksis vil mange objekter v&aelig;re en mellomting mellom data- og tjenesteorientert. Dataorienterte objekter kan ofte tilby tjenesteaktige metoder som opererer p&aring; interne data, f.eks. implementerer en standard sammenligning til bruk av ved sortering. Tjenesteorienterte objekter kan ogs&aring; ha metoder for &aring; h&aring;ndtere intern tilstand. F.eks. kan loggeren kapsle inn interne data som styrer hvordan den oppf&oslash;rer seg, f.eks. at alvorlige meldinger lagres p&aring; fil, mens advarsler skrives til konsollet og alt annet ignoreres.</p><ac:macro ac:name="metadata-list"><ac:parameter ac:name="orientation">horizontal</ac:parameter><ac:plain-text-body><![CDATA[|| Sidetype | teori |
|| Ferdig | 50 |
|| Dekningsgrad | 25 |
|| Omfang | 25 |]]></ac:plain-text-body></ac:macro>